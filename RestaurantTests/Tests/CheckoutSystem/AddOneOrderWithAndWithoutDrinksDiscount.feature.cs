// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace RestaurantTests.Tests.CheckoutSystem
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("AddOneOrderWithAndWithoutDrinksDiscount")]
    public partial class AddOneOrderWithAndWithoutDrinksDiscountFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
#line 1 "AddOneOrderWithAndWithoutDrinksDiscount.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Tests/CheckoutSystem", "AddOneOrderWithAndWithoutDrinksDiscount", "Add new order for 1 starter, 2 mains and 2 drinks before 19:00\r\nVerify the bill c" +
                    "alculated\r\nUpdate the order with 2 more mains 2 and drinks at 20:00\r\nVerify the " +
                    "final bill calculated", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Process one order with and without drinks discount")]
        [NUnit.Framework.CategoryAttribute("regression")]
        [NUnit.Framework.CategoryAttribute("AddOneOrderWithAndWithoutDrinksDiscount")]
        public void ProcessOneOrderWithAndWithoutDrinksDiscount()
        {
            string[] tagsOfScenario = new string[] {
                    "regression",
                    "AddOneOrderWithAndWithoutDrinksDiscount"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Process one order with and without drinks discount", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 9
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                            "OrderNumber",
                            "MenuCategoryType",
                            "Quantity",
                            "OrderTime"});
                table2.AddRow(new string[] {
                            "Order1",
                            "Starter",
                            "1",
                            "18:59"});
                table2.AddRow(new string[] {
                            "Order1",
                            "Main",
                            "2",
                            "18:59"});
                table2.AddRow(new string[] {
                            "Order1",
                            "Drink",
                            "2",
                            "18:59"});
#line 10
  testRunner.Given("customer placed new orders", ((string)(null)), table2, "Given ");
#line hidden
#line 16
  testRunner.Then("bill for the Order1 is correctly calculated", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                            "OrderNumber",
                            "MenuCategoryType",
                            "Quantity",
                            "OrderTime"});
                table3.AddRow(new string[] {
                            "Order1",
                            "Main",
                            "2",
                            "20:00"});
                table3.AddRow(new string[] {
                            "Order1",
                            "Drink",
                            "2",
                            "20:00"});
#line 18
  testRunner.When("customer updated the existing orders", ((string)(null)), table3, "When ");
#line hidden
#line 23
  testRunner.Then("bill for the Order1 is correctly calculated", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
